(* EBNF Grammar for ExprParser *)

(* The overall structure of the program *)
program ::= { statement, NEWLINE }
                 | { statement, NEWLINE }, statement ;

(* A statement can be an assignment, an expression, or a conversion *)
statement ::= assingment 
                 | expression
                 | conversion;


assignment ::= variable, EQ, expression;

(* An expression can be a variable, a measure, or a combination of these with operators *)
expression ::= term, { OP_TOKEN, expression };

term ::= variable
                 | measure
                 | LPAREN, expression, RPAREN;

(* A measure is an integer followed by a variable or a raw expression followed by a variable *)
measure ::= INT, variable
                 | raw_expression, variable ;

(* A conversion applies a conversion token to an expression and a variable *)
conversion ::= expression, CONVERSION_TOKEN, variable;

(* A raw expression can be an integer or a parenthesized expression with operators *)
raw_expression ::= INT
                 | LPAREN, raw_expression, {OP_TOKEN, raw_expression}, RPAREN;

(* Lexical elements *)
variable ::= letter, { letter | digit | "_" } ;

INT ::= digit, { digit } ;

(* Tokens and symbols *)
EQ               ::= "=" ;
LPAREN           ::= "(" ;
RPAREN           ::= ")" ;
NEWLINE          ::= "\n" ;
OP_TOKEN         ::= "+" | "-" ;
CONVERSION_TOKEN ::= "to" | "as" | "->" ;

(* Characters *)
digit            ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
letter           ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" |
                   "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" |
                   "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" |
                   "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;

(* Whitespace is skipped *)
WS               ::= " " | "\t" | "\r" | "\f" ;
